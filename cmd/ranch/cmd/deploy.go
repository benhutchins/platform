package cmd

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"text/template"

	"github.com/goodeggs/platform/cmd/ranch/util"
	"github.com/spf13/cobra"
)

var Build bool

const dockerfileTemplate string = `# generated by ranch
FROM goodeggs/cedar:latest
MAINTAINER Good Eggs <open-source@goodeggs.com>
# everything else handled by goodeggs/cedar ONBUILD commands
# see https://github.com/goodeggs/cedar
`

type dockerComposeTemplateVars struct {
	ImageName string
	Config    *util.RanchConfig
}

var dockerComposeTemplate = template.Must(template.New("docker-compose").Parse(`# generated by ranch
{{ $imageName := .ImageName }}
{{ range $Name, $Process := .Config.Processes }}
{{ $Name }}:
  image: {{ $imageName }}
  command: {{ $Process.Command }}
	{{ if eq $Name "web" }}
	ports:
	  - 443:4443
  {{ end }}
{{ end }}
`))

var deployCmd = &cobra.Command{
	Use:   "deploy",
	Short: "Deploy the application",
	Run: func(cmd *cobra.Command, args []string) {

		appName, err := util.AppName(cmd)
		util.Check(err)

		appDir, err := util.AppDir(cmd)
		util.Check(err)

		config, err := util.LoadAppConfig(cmd)
		util.Check(err)

		appVersion := config.Version

		imageName := util.DockerImageName(appName, appVersion)

		if Build {
			dockerfile := path.Join(appDir, "Dockerfile")

			if _, err := os.Stat(dockerfile); os.IsNotExist(err) {
				err = ioutil.WriteFile(dockerfile, []byte(dockerfileTemplate), 0644)
				util.Check(err)

				defer os.Remove(dockerfile) // cleanup
			} else {
				fmt.Println("WARNING: using existing Dockerfile")
			}

			fmt.Println("TODO: generate Procfile")

			err = util.DockerBuild(appDir, imageName)
			util.Check(err)

			err = util.DockerPush(imageName)
			util.Check(err)
		} else {
			fmt.Println("skipping Docker build & push")
		}

		buildDir, err := ioutil.TempDir("", "ranch")
		util.Check(err)

		fmt.Println("using build directory", buildDir)

		var out bytes.Buffer
		err = dockerComposeTemplate.Execute(&out, dockerComposeTemplateVars{
			ImageName: imageName,
			Config:    config,
		})
		util.Check(err)

		dockerCompose := path.Join(buildDir, "docker-compose.yml")
		err = ioutil.WriteFile(dockerCompose, out.Bytes(), 0644)
		util.Check(err)

		fmt.Println("TODO: convox deploy --app $appName")
		fmt.Println("TODO: convox scale $process --count $count --memory $memory --app $appName")
	},
}

func init() {
	deployCmd.Flags().BoolVar(&Build, "build", true, "Build and push the Docker image")
	RootCmd.AddCommand(deployCmd)
}
