package cmd

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"text/template"

	"github.com/goodeggs/platform/cmd/ranch/util"
	"github.com/spf13/cobra"
)

var Build bool

const dockerfileTemplate string = `# generated by ranch
FROM goodeggs/cedar:bebd701
MAINTAINER Good Eggs <open-source@goodeggs.com>
# everything else handled by goodeggs/cedar ONBUILD commands
# see https://github.com/goodeggs/cedar
`

type templateVars struct {
	ImageName string
	Config    *util.RanchConfig
}

var dockerComposeTemplate = template.Must(template.New("docker-compose").Parse(`# generated by ranch
{{ $imageName := .ImageName }}
{{ range $Name, $Process := .Config.Processes }}
{{ $Name }}:
  image: {{ $imageName }}
  command: /start {{ $Name }}
  {{ if eq $Name "web" }}
  ports:
    - 443:4443
  {{ end }}
{{ end }}
`))

var procfileTemplate = template.Must(template.New("procfile").Parse(`# generated by ranch
{{ range $Name, $Process := .Config.Processes }}
{{ $Name }}: {{ $Process.Command }}
{{ end }}
`))

var deployCmd = &cobra.Command{
	Use:   "deploy",
	Short: "Deploy the application",
	Run: func(cmd *cobra.Command, args []string) {

		appDir, err := util.AppDir(cmd)
		util.Check(err)

		clean, err := util.GitIsClean(appDir)
		util.Check(err)

		if !clean {
			util.Die("git working directory not clean.")
		}

		appName, err := util.AppName(cmd)
		util.Check(err)

		config, err := util.LoadAppConfig(cmd)
		util.Check(err)

		appVersion, err := util.AppVersion(cmd)
		util.Check(err)

		imageName := util.DockerImageName(appName, appVersion)

		if Build {
			err = dockerBuildAndPush(appDir, imageName, config)
			util.Check(err)
		} else {
			fmt.Println("skipping Docker build & push")
		}

		buildDir, err := ioutil.TempDir("", "ranch")
		util.Check(err)

		fmt.Println("using build directory", buildDir)

		err = generateDockerCompose(imageName, config, buildDir)
		util.Check(err)

		err = convoxDeploy(appName, appVersion, buildDir)
		util.Check(err)

		err = convoxScale(appName, config)
		util.Check(err)

	},
}

func init() {
	deployCmd.Flags().BoolVar(&Build, "build", true, "Build and push the Docker image")
	RootCmd.AddCommand(deployCmd)
}

func convoxScale(appName string, config *util.RanchConfig) error {
	var err error

	for processName, processConfig := range config.Processes {
		err = util.ConvoxScale(appName, processName, processConfig.Instances, processConfig.Memory)
		if err != nil {
			return err
		}
	}

	return nil
}

func convoxDeploy(appName, appVersion, buildDir string) error {
	releaseId, err := util.ConvoxDeploy(appName, buildDir)

	if err != nil {
		return err
	}

	err = util.EcruCreateRelease(appName, appVersion, releaseId)

	if err != nil {
		return err
	}

	fmt.Printf("promoting release %s\n", appVersion)

	err = util.ConvoxPromote(appName, releaseId)

	if err != nil {
		return err
	}

	fmt.Printf("waiting for 'running' status... ")
	err = util.WaitForStatus(appName, "running")

	if err != nil {
		fmt.Println("ERR")
		return err
	}

	fmt.Println("OK")
	return nil
}

func generateDockerCompose(imageName string, config *util.RanchConfig, buildDir string) error {
	var out bytes.Buffer

	err := dockerComposeTemplate.Execute(&out, templateVars{
		ImageName: fmt.Sprintf("%s/%s", util.DockerRegistry(), imageName),
		Config:    config,
	})

	if err != nil {
		return err
	}

	dockerCompose := path.Join(buildDir, "docker-compose.yml")
	err = ioutil.WriteFile(dockerCompose, out.Bytes(), 0644)

	if err != nil {
		return err
	}

	return nil
}

func dockerBuildAndPush(appDir, imageName string, config *util.RanchConfig) error {
	var err error

	dockerfile := path.Join(appDir, "Dockerfile")

	if _, err := os.Stat(dockerfile); os.IsNotExist(err) {
		err = ioutil.WriteFile(dockerfile, []byte(dockerfileTemplate), 0644)

		if err != nil {
			return err
		}

		defer os.Remove(dockerfile) // cleanup
	} else {
		fmt.Println("WARNING: using existing Dockerfile")
	}

	procfile := path.Join(appDir, "Procfile")

	if _, err := os.Stat(procfile); os.IsNotExist(err) {
		var out bytes.Buffer
		err = procfileTemplate.Execute(&out, templateVars{
			ImageName: imageName,
			Config:    config,
		})

		if err != nil {
			return err
		}

		err = ioutil.WriteFile(procfile, out.Bytes(), 0644)

		if err != nil {
			return err
		}

		defer os.Remove(procfile) // cleanup
	} else {
		fmt.Println("WARNING: using existing Procfile")
	}

	err = util.DockerBuild(appDir, imageName)

	if err != nil {
		return err
	}

	err = util.DockerPush(imageName)

	if err != nil {
		return err
	}

	return nil
}
